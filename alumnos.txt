#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>  
#include <time.h>   
#include <ctype.h>

#define MAXP 1000

typedef struct {
	int lu;
	char nombre[60];
	char apellido[60];
	int nota;
}talumno;

void generarAluBin(talumno vecP[], int * cantidadCargados);
void swapprods(talumno *p1, talumno *p2);
void escribirEnArchivo(talumno vecP[MAXP], int * cantidadCargados);
int main() {
	//Seed
	srand(time(NULL));
	talumno vecAlumnos[MAXP];
	int aluCargados = 0;
	int eleccion = 99;
	float prom;
	int res;

	while (eleccion != 9)
	{
		printf(" [+] Bienvenido al programa de generacion de notas Programacion Avanzada en Pinamar!\n");
		printf("\n [+] Que desea hacer?\n\n");
		printf("1. Generar .dat de alumnos\n");
		printf("2. Otorgar notas\n");
		printf("3. Mostrar .dat de alumnos\n");
		printf("\n");
		printf("9. Salir\n\n");
		printf(">> ");
		scanf("%d", &eleccion);
		getchar();
		system("cls");

		switch (eleccion)
		{
		case 1:

			generarAluBin(vecAlumnos, &aluCargados);

			printf("\n ! Carga de alumnos en binario finalizada con %d alumnos en total.\n", aluCargados);
			printf("\n");
			printf("pause");
			system("cls");
			break;

		case 2:
			printf("\n [+] Productos Cargados: %d\n\n", prodCargados);
			mostrarProductos(vecProductos, &prodCargados);
			printf("\n");
			system("pause");
			system("cls");
			break;

		case 2:
			printf("\n [+] Productos Cargados: %d\n\n", prodCargados);
			mostrarProductos(vecProductos, &prodCargados);
			printf("\n");
			system("pause");
			system("cls");
			break;

		case 9:
			break;
		}
	}

	prom = 0;
	system("pause");
	return 0;
}

/////////////////////////////////////////////////////////////////////
void generarAluBin(talumno vecP[], int * cantidadCargados) {
	int resultadodecarga;
	int i, cant = 0, j;
	
	char cad[] = "Anezin";
	strcpy(vecP[0].apellido, cad);
	char cad[] = "Arenhardt";
	strcpy(vecP[1].apellido, cad);
	char cad[] = "Basile";
	strcpy(vecP[2].apellido, cad);
	char cad[] = "Beltran";
	strcpy(vecP[3].apellido, cad);
	char cad[] = "Bonnin";
	strcpy(vecP[4].apellido, cad);
	char cad[] = "Cohen";
	strcpy(vecP[5].apellido, cad);
	char cad[] = "Cosoleto";
	strcpy(vecP[6].apellido, cad);
	char cad[] = "Orechia";
	strcpy(vecP[7].apellido, cad);
	char cad[] = "Sanchez";
	strcpy(vecP[8].apellido, cad);
	char cad[] = "Stark";
	strcpy(vecP[9].apellido, cad);


	char cad[] = "Luciano";
	strcpy(vecP[0].nombre, cad);
	char cad[] = "Ruben Dario";
	strcpy(vecP[1].nombre, cad);
	char cad[] = "Matias";
	strcpy(vecP[2].nombre, cad);
	char cad[] = "Federico Javier";
	strcpy(vecP[3].nombre, cad);
	char cad[] = "Francisco";
	strcpy(vecP[4].nombre, cad);
	char cad[] = "Felipe";
	strcpy(vecP[5].nombre, cad);
	char cad[] = "Carlos Andres";
	strcpy(vecP[6].nombre, cad);
	char cad[] = "Pedro Javier";
	strcpy(vecP[7].nombre, cad);
	char cad[] = "Lucas Jose";
	strcpy(vecP[8].nombre, cad);
	char cad[] = "Alejandro Nicolas";
	strcpy(vecP[9].nombre, cad);

	vecP[0].lu = 1100018;
	vecP[1].lu = 1069410;
	vecP[2].lu = 132362;
	vecP[3].lu = 1072053;
	vecP[4].lu = 1093742;
	vecP[5].lu = 1060468;
	vecP[6].lu = 1085099;
	vecP[7].lu = 1066799;
	vecP[8].lu = 1094355;
	vecP[9].lu = 126767;


	//Orden alfabetico
	for (i = 0; i < *cantidadCargados; i++)
	{
		if (strcmp(vecP[i].nombre, vecP[*cantidadCargados].nombre) > 0)
		{
			swapprods(&vecP[i], &vecP[*cantidadCargados]);
		}
	}

	*cantidadCargados = 10;

	escribirEnArchivo(vecP, &cantidadCargados);

}

/////////////////////////////////////////////////////////////////////
void escribirEnArchivo(talumno vecP[MAXP], int * cantidadCargados) {
	int i;
	FILE *arch;

	arch = fopen("alumnos.dat", "wb");
	if (arch == NULL) {
		printf("No se puedo crear el archivo");
		return 1;
	}

	for (i = 0; i < *cantidadCargados; i++)
	{
		fwrite(&vecP[i], sizeof(vecP[i]), 1, arch);
	}

	fclose(arch);
}

/////////////////////////////////////////////////////////////////////
void swapprods(talumno *p1, talumno *p2)
{
	talumno ptemp;
	ptemp = *p1;
	*p1 = *p2;
	*p2 = ptemp;
}
